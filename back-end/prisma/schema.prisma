generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Image {
  id String @id @default(uuid())
  url String
  entityId String
  entityType String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  user User? @relation(fields: [userId], references: [id])
  userId String?

  store Store? @relation(fields: [storeId], references: [id])
  storeId String?

  product Product? @relation(fields: [productId], references: [id])
  productId String?

  review Review? @relation(fields: [reviewId], references: [id])
  reviewId String?

  delivery Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId String?

  @@map("images")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  emailVerified Boolean @default(false)
  verificationCode String?
  verificationCodeSentAt DateTime?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  orders Order[]
  addresses Address[]
  images Image[]
  reviews Review[]
  notifications Notification[]

  @@map("users")
}

model Store {
  id String @id @default(uuid())
  name String
  password String
  description String
  email String @unique
  phone String
  address String
  cnpj String @unique
  type String
  averageRating Float? @default(0)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  products Product[]
  images Image[]
  reviews Review[]

  @@map("stores")
}

model Product {
  id String @id @default(uuid())
  name String
  description String
  price Float
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  orderItems OrderItem[]
  images Image[]

  @@map("products")
}

model Order {
  id String @id @default(uuid())
  customerId String
  customer User @relation(fields: [customerId], references: [id])
  total Float
  status OrderStatus @default(PENDING)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  items OrderItem[]
  payments Payment[]
  delivery Delivery?

  @@map("orders")
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  price Float

  @@map("order_items")
}

model Address {
  id String @id @default(uuid())
  customerId String
  customer User @relation(fields: [customerId], references: [id])
  street String
  city String
  state String
  zipCode String
  country String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("addresses")
}

model Payment {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  amount Float
  method String
  status PaymentStatus @default(PENDING)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("payments")
}

model Review {
  id String @id @default(uuid())
  userId String
  storeId String
  rating Int
  comment String
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])
  images Image[]

  @@map("reviews")
}

model Delivery {
  id String @id @default(uuid())
  orderId String @unique
  status String
  estimatedDelivery DateTime
  actualDelivery DateTime?

  order Order @relation(fields: [orderId], references: [id])
  images Image[]

  @@map("deliveries")
}

model Notification {
  id String @id @default(uuid())
  userId String
  content String
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
